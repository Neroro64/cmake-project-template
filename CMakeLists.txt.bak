cmake_minimum_required(VERSION 3.22)

# set the project name
set(PROJECT_NAME "Tutorial")
set(PROJECT_VERSION 0.1)
set(PROJECT_DESCRIPTION "Cmake tutorial")
set(PROJECT_LANGUAGE "CXX")

# Options
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
# Setup
project(${PROJECT_NAME} VERSION ${PROJECT_VERSION} DESCRIPTION ${PROJECT_DESCRIPTION} LANGUAGES ${PROJECT_LANGUAGE})
configure_file(debugConfig.h.in debugConfig.h)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++20 -O3")
set(CMAKE_CXX_STANDARD_REQUIRED True)
if (MSVC)
    # warning level 4 and all warnings as errors
    add_compile_options(/W4)
else()
    # lots of warnings and all warnings as errors
    add_compile_options(-Wall -Wextra -pedantic)
endif()


option(USE_MYTEST "Make Test library optional" ON)
if (USE_MYTEST)
    add_subdirectory(src)
    list(APPEND EXTRA_LIBS Test)
    # list(APPEND EXTRA_INCLUDES "${PROJECT_SOURCE_DIR}/src")
endif()

# add the executable
add_executable(Tutorial tutorial.cpp)

# Link the libary Test to Tutorial
target_link_libraries(Tutorial PUBLIC ${EXTRA_LIBS})

# add the binary tree to the search path for include files
# so that we will find TutorialConfig.h
target_include_directories(Tutorial PUBLIC
                          "${PROJECT_BINARY_DIR}"
                          # "${EXTRA_INCLUDES}"
                         )

install(TARGETS Tutorial DESTINATION bin)


# Testing
include(CTest)
enable_testing()
add_test(NAME t1 COMMAND Tutorial HELLO WORLD)

add_test(NAME t2 COMMAND Tutorial)
set_tests_properties(t2 PROPERTIES PASS_REGULAR_EXPRESSION "Usage: .*number")

function(do_test target arg result)
    add_test(NAME Comp${arg} COMMAND ${target} ${arg})
    set_tests_properties(Comp${arg} PROPERTIES PASS_REGULAR_EXPRESSION ${result})
endfunction()

do_test(Tutorial 4 "4 is 2")
do_test(Tutorial 0.001 "0.001")

